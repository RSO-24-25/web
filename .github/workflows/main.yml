name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t rsocontainerregistry.azurecr.io/web-service:latest .

      # Log in to Azure Container Registry using secrets
      - name: Log in to Azure Container Registry
        run: |
          echo "wI0p9nGKlzHZaAGFWjvDIuM9PYpwsnqlnZl/vkG1KD+ACRDgR2Zm" | docker login rsocontainerregistry.azurecr.io --username "rsocontainerregistry" --password-stdin

      # Push Docker image to Azure Container Registry
      - name: Push Docker image to ACR
        run: |
          docker push rsocontainerregistry.azurecr.io/web-service:latest


       # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Configure Kubernetes access
      - name: Set up kubeconfig
        #env:
         # KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      # Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # Deploy to Kubernetes using Helm chart
      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install web-frontend ./web-frontend-helm \
            #--set image.repository=rsocontainerregistry.azurecr.io/web-frontend \
            #--set image.tag=latest
